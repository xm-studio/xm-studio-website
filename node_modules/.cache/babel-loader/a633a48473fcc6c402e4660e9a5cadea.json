{"ast":null,"code":"/**\n * vivus - JavaScript library to make drawing animation on SVG\n * @version v0.4.5\n * @link https://github.com/maxwellito/vivus\n * @license MIT\n */\n(function () {\n  'use strict';\n  /**\n   * Pathformer\n   * Beta version\n   *\n   * Take any SVG version 1.1 and transform\n   * child elements to 'path' elements\n   *\n   * This code is purely forked from\n   * https://github.com/Waest/SVGPathConverter\n   */\n\n  /**\n   * Class constructor\n   *\n   * @param {DOM|String} element Dom element of the SVG or id of it\n   */\n\n  function Pathformer(element) {\n    // Test params\n    if (typeof element === 'undefined') {\n      throw new Error('Pathformer [constructor]: \"element\" parameter is required');\n    } // Set the element\n\n\n    if (element.constructor === String) {\n      element = document.getElementById(element);\n\n      if (!element) {\n        throw new Error('Pathformer [constructor]: \"element\" parameter is not related to an existing ID');\n      }\n    }\n\n    if (element instanceof window.SVGElement || element instanceof window.SVGGElement || /^svg$/i.test(element.nodeName)) {\n      this.el = element;\n    } else {\n      throw new Error('Pathformer [constructor]: \"element\" parameter must be a string or a SVGelement');\n    } // Start\n\n\n    this.scan(element);\n  }\n  /**\n   * List of tags which can be transformed\n   * to path elements\n   *\n   * @type {Array}\n   */\n\n\n  Pathformer.prototype.TYPES = ['line', 'ellipse', 'circle', 'polygon', 'polyline', 'rect'];\n  /**\n   * List of attribute names which contain\n   * data. This array list them to check if\n   * they contain bad values, like percentage.\n   *\n   * @type {Array}\n   */\n\n  Pathformer.prototype.ATTR_WATCH = ['cx', 'cy', 'points', 'r', 'rx', 'ry', 'x', 'x1', 'x2', 'y', 'y1', 'y2'];\n  /**\n   * Finds the elements compatible for transform\n   * and apply the liked method\n   *\n   * @param  {object} options Object from the constructor\n   */\n\n  Pathformer.prototype.scan = function (svg) {\n    var fn,\n        element,\n        pathData,\n        pathDom,\n        elements = svg.querySelectorAll(this.TYPES.join(','));\n\n    for (var i = 0; i < elements.length; i++) {\n      element = elements[i];\n      fn = this[element.tagName.toLowerCase() + 'ToPath'];\n      pathData = fn(this.parseAttr(element.attributes));\n      pathDom = this.pathMaker(element, pathData);\n      element.parentNode.replaceChild(pathDom, element);\n    }\n  };\n  /**\n   * Read `line` element to extract and transform\n   * data, to make it ready for a `path` object.\n   *\n   * @param  {DOMelement} element Line element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.lineToPath = function (element) {\n    var newElement = {},\n        x1 = element.x1 || 0,\n        y1 = element.y1 || 0,\n        x2 = element.x2 || 0,\n        y2 = element.y2 || 0;\n    newElement.d = 'M' + x1 + ',' + y1 + 'L' + x2 + ',' + y2;\n    return newElement;\n  };\n  /**\n   * Read `rect` element to extract and transform\n   * data, to make it ready for a `path` object.\n   * The radius-border is not taken in charge yet.\n   * (your help is more than welcomed)\n   *\n   * @param  {DOMelement} element Rect element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.rectToPath = function (element) {\n    var newElement = {},\n        x = parseFloat(element.x) || 0,\n        y = parseFloat(element.y) || 0,\n        width = parseFloat(element.width) || 0,\n        height = parseFloat(element.height) || 0;\n\n    if (element.rx || element.ry) {\n      var rx = parseInt(element.rx, 10) || -1,\n          ry = parseInt(element.ry, 10) || -1;\n      rx = Math.min(Math.max(rx < 0 ? ry : rx, 0), width / 2);\n      ry = Math.min(Math.max(ry < 0 ? rx : ry, 0), height / 2);\n      newElement.d = 'M ' + (x + rx) + ',' + y + ' ' + 'L ' + (x + width - rx) + ',' + y + ' ' + 'A ' + rx + ',' + ry + ',0,0,1,' + (x + width) + ',' + (y + ry) + ' ' + 'L ' + (x + width) + ',' + (y + height - ry) + ' ' + 'A ' + rx + ',' + ry + ',0,0,1,' + (x + width - rx) + ',' + (y + height) + ' ' + 'L ' + (x + rx) + ',' + (y + height) + ' ' + 'A ' + rx + ',' + ry + ',0,0,1,' + x + ',' + (y + height - ry) + ' ' + 'L ' + x + ',' + (y + ry) + ' ' + 'A ' + rx + ',' + ry + ',0,0,1,' + (x + rx) + ',' + y;\n    } else {\n      newElement.d = 'M' + x + ' ' + y + ' ' + 'L' + (x + width) + ' ' + y + ' ' + 'L' + (x + width) + ' ' + (y + height) + ' ' + 'L' + x + ' ' + (y + height) + ' Z';\n    }\n\n    return newElement;\n  };\n  /**\n   * Read `polyline` element to extract and transform\n   * data, to make it ready for a `path` object.\n   *\n   * @param  {DOMelement} element Polyline element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.polylineToPath = function (element) {\n    var newElement = {},\n        points = element.points.trim().split(' '),\n        i,\n        path; // Reformatting if points are defined without commas\n\n    if (element.points.indexOf(',') === -1) {\n      var formattedPoints = [];\n\n      for (i = 0; i < points.length; i += 2) {\n        formattedPoints.push(points[i] + ',' + points[i + 1]);\n      }\n\n      points = formattedPoints;\n    } // Generate the path.d value\n\n\n    path = 'M' + points[0];\n\n    for (i = 1; i < points.length; i++) {\n      if (points[i].indexOf(',') !== -1) {\n        path += 'L' + points[i];\n      }\n    }\n\n    newElement.d = path;\n    return newElement;\n  };\n  /**\n   * Read `polygon` element to extract and transform\n   * data, to make it ready for a `path` object.\n   * This method rely on polylineToPath, because the\n   * logic is similar. The path created is just closed,\n   * so it needs an 'Z' at the end.\n   *\n   * @param  {DOMelement} element Polygon element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.polygonToPath = function (element) {\n    var newElement = Pathformer.prototype.polylineToPath(element);\n    newElement.d += 'Z';\n    return newElement;\n  };\n  /**\n   * Read `ellipse` element to extract and transform\n   * data, to make it ready for a `path` object.\n   *\n   * @param  {DOMelement} element ellipse element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.ellipseToPath = function (element) {\n    var newElement = {},\n        rx = parseFloat(element.rx) || 0,\n        ry = parseFloat(element.ry) || 0,\n        cx = parseFloat(element.cx) || 0,\n        cy = parseFloat(element.cy) || 0,\n        startX = cx - rx,\n        startY = cy,\n        endX = parseFloat(cx) + parseFloat(rx),\n        endY = cy;\n    newElement.d = 'M' + startX + ',' + startY + 'A' + rx + ',' + ry + ' 0,1,1 ' + endX + ',' + endY + 'A' + rx + ',' + ry + ' 0,1,1 ' + startX + ',' + endY;\n    return newElement;\n  };\n  /**\n   * Read `circle` element to extract and transform\n   * data, to make it ready for a `path` object.\n   *\n   * @param  {DOMelement} element Circle element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.circleToPath = function (element) {\n    var newElement = {},\n        r = parseFloat(element.r) || 0,\n        cx = parseFloat(element.cx) || 0,\n        cy = parseFloat(element.cy) || 0,\n        startX = cx - r,\n        startY = cy,\n        endX = parseFloat(cx) + parseFloat(r),\n        endY = cy;\n    newElement.d = 'M' + startX + ',' + startY + 'A' + r + ',' + r + ' 0,1,1 ' + endX + ',' + endY + 'A' + r + ',' + r + ' 0,1,1 ' + startX + ',' + endY;\n    return newElement;\n  };\n  /**\n   * Create `path` elements form original element\n   * and prepared objects\n   *\n   * @param  {DOMelement} element  Original element to transform\n   * @param  {object} pathData     Path data (from `toPath` methods)\n   * @return {DOMelement}          Path element\n   */\n\n\n  Pathformer.prototype.pathMaker = function (element, pathData) {\n    var i,\n        attr,\n        pathTag = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n    for (i = 0; i < element.attributes.length; i++) {\n      attr = element.attributes[i];\n\n      if (this.ATTR_WATCH.indexOf(attr.name) === -1) {\n        pathTag.setAttribute(attr.name, attr.value);\n      }\n    }\n\n    for (i in pathData) {\n      pathTag.setAttribute(i, pathData[i]);\n    }\n\n    return pathTag;\n  };\n  /**\n   * Parse attributes of a DOM element to\n   * get an object of attribute => value\n   *\n   * @param  {NamedNodeMap} attributes Attributes object from DOM element to parse\n   * @return {object}                  Object of attributes\n   */\n\n\n  Pathformer.prototype.parseAttr = function (element) {\n    var attr,\n        output = {};\n\n    for (var i = 0; i < element.length; i++) {\n      attr = element[i]; // Check if no data attribute contains '%', or the transformation is impossible\n\n      if (this.ATTR_WATCH.indexOf(attr.name) !== -1 && attr.value.indexOf('%') !== -1) {\n        throw new Error('Pathformer [parseAttr]: a SVG shape got values in percentage. This cannot be transformed into \\'path\\' tags. Please use \\'viewBox\\'.');\n      }\n\n      output[attr.name] = attr.value;\n    }\n\n    return output;\n  };\n\n  'use strict';\n\n  var setupEnv, requestAnimFrame, cancelAnimFrame, parsePositiveInt;\n  /**\n   * Vivus\n   * Beta version\n   *\n   * Take any SVG and make the animation\n   * to give give the impression of live drawing\n   *\n   * This in more than just inspired from codrops\n   * At that point, it's a pure fork.\n   */\n\n  /**\n   * Class constructor\n   * option structure\n   *   type: 'delayed'|'sync'|'oneByOne'|'script' (to know if the items must be drawn synchronously or not, default: delayed)\n   *   duration: <int> (in frames)\n   *   start: 'inViewport'|'manual'|'autostart' (start automatically the animation, default: inViewport)\n   *   delay: <int> (delay between the drawing of first and last path)\n   *   dashGap <integer> whitespace extra margin between dashes\n   *   pathTimingFunction <function> timing animation function for each path element of the SVG\n   *   animTimingFunction <function> timing animation function for the complete SVG\n   *   forceRender <boolean> force the browser to re-render all updated path items\n   *   selfDestroy <boolean> removes all extra styling on the SVG, and leaves it as original\n   *\n   * The attribute 'type' is by default on 'delayed'.\n   *  - 'delayed'\n   *    all paths are draw at the same time but with a\n   *    little delay between them before start\n   *  - 'sync'\n   *    all path are start and finish at the same time\n   *  - 'oneByOne'\n   *    only one path is draw at the time\n   *    the end of the first one will trigger the draw\n   *    of the next one\n   *\n   * All these values can be overwritten individually\n   * for each path item in the SVG\n   * The value of frames will always take the advantage of\n   * the duration value.\n   * If you fail somewhere, an error will be thrown.\n   * Good luck.\n   *\n   * @constructor\n   * @this {Vivus}\n   * @param {DOM|String}   element  Dom element of the SVG or id of it\n   * @param {Object}       options  Options about the animation\n   * @param {Function}     callback Callback for the end of the animation\n   */\n\n  function Vivus(element, options, callback) {\n    setupEnv(); // Setup\n\n    this.isReady = false;\n    this.setElement(element, options);\n    this.setOptions(options);\n    this.setCallback(callback);\n\n    if (this.isReady) {\n      this.init();\n    }\n  }\n  /**\n   * Timing functions\n   **************************************\n   *\n   * Default functions to help developers.\n   * It always take a number as parameter (between 0 to 1) then\n   * return a number (between 0 and 1)\n   */\n\n\n  Vivus.LINEAR = function (x) {\n    return x;\n  };\n\n  Vivus.EASE = function (x) {\n    return -Math.cos(x * Math.PI) / 2 + 0.5;\n  };\n\n  Vivus.EASE_OUT = function (x) {\n    return 1 - Math.pow(1 - x, 3);\n  };\n\n  Vivus.EASE_IN = function (x) {\n    return Math.pow(x, 3);\n  };\n\n  Vivus.EASE_OUT_BOUNCE = function (x) {\n    var base = -Math.cos(x * (0.5 * Math.PI)) + 1,\n        rate = Math.pow(base, 1.5),\n        rateR = Math.pow(1 - x, 2),\n        progress = -Math.abs(Math.cos(rate * (2.5 * Math.PI))) + 1;\n    return 1 - rateR + progress * rateR;\n  };\n  /**\n   * Setters\n   **************************************\n   */\n\n  /**\n   * Check and set the element in the instance\n   * The method will not return anything, but will throw an\n   * error if the parameter is invalid\n   *\n   * @param {DOM|String}   element  SVG Dom element or id of it\n   */\n\n\n  Vivus.prototype.setElement = function (element, options) {\n    var onLoad, self; // Basic check\n\n    if (typeof element === 'undefined') {\n      throw new Error('Vivus [constructor]: \"element\" parameter is required');\n    } // Set the element\n\n\n    if (element.constructor === String) {\n      element = document.getElementById(element);\n\n      if (!element) {\n        throw new Error('Vivus [constructor]: \"element\" parameter is not related to an existing ID');\n      }\n    }\n\n    this.parentEl = element; // Load the SVG with XMLHttpRequest and extract the SVG\n\n    if (options && options.file) {\n      self = this;\n\n      onLoad = function () {\n        var domSandbox = document.createElement('div');\n        domSandbox.innerHTML = this.responseText;\n        var svgTag = domSandbox.querySelector('svg');\n\n        if (!svgTag) {\n          throw new Error('Vivus [load]: Cannot find the SVG in the loaded file : ' + options.file);\n        }\n\n        self.el = svgTag;\n        self.el.setAttribute('width', '100%');\n        self.el.setAttribute('height', '100%');\n        self.parentEl.appendChild(self.el);\n        self.isReady = true;\n        self.init();\n        self = null;\n      };\n\n      var oReq = new window.XMLHttpRequest();\n      oReq.addEventListener('load', onLoad);\n      oReq.open('GET', options.file);\n      oReq.send();\n      return;\n    }\n\n    switch (element.constructor) {\n      case window.SVGSVGElement:\n      case window.SVGElement:\n      case window.SVGGElement:\n        this.el = element;\n        this.isReady = true;\n        break;\n\n      case window.HTMLObjectElement:\n        self = this;\n\n        onLoad = function (e) {\n          if (self.isReady) {\n            return;\n          }\n\n          self.el = element.contentDocument && element.contentDocument.querySelector('svg');\n\n          if (!self.el && e) {\n            throw new Error('Vivus [constructor]: object loaded does not contain any SVG');\n          } else if (self.el) {\n            if (element.getAttribute('built-by-vivus')) {\n              self.parentEl.insertBefore(self.el, element);\n              self.parentEl.removeChild(element);\n              self.el.setAttribute('width', '100%');\n              self.el.setAttribute('height', '100%');\n            }\n\n            self.isReady = true;\n            self.init();\n            self = null;\n          }\n        };\n\n        if (!onLoad()) {\n          element.addEventListener('load', onLoad);\n        }\n\n        break;\n\n      default:\n        throw new Error('Vivus [constructor]: \"element\" parameter is not valid (or miss the \"file\" attribute)');\n    }\n  };\n  /**\n   * Set up user option to the instance\n   * The method will not return anything, but will throw an\n   * error if the parameter is invalid\n   *\n   * @param  {object} options Object from the constructor\n   */\n\n\n  Vivus.prototype.setOptions = function (options) {\n    var allowedTypes = ['delayed', 'sync', 'async', 'nsync', 'oneByOne', 'scenario', 'scenario-sync'];\n    var allowedStarts = ['inViewport', 'manual', 'autostart']; // Basic check\n\n    if (options !== undefined && options.constructor !== Object) {\n      throw new Error('Vivus [constructor]: \"options\" parameter must be an object');\n    } else {\n      options = options || {};\n    } // Set the animation type\n\n\n    if (options.type && allowedTypes.indexOf(options.type) === -1) {\n      throw new Error('Vivus [constructor]: ' + options.type + ' is not an existing animation `type`');\n    } else {\n      this.type = options.type || allowedTypes[0];\n    } // Set the start type\n\n\n    if (options.start && allowedStarts.indexOf(options.start) === -1) {\n      throw new Error('Vivus [constructor]: ' + options.start + ' is not an existing `start` option');\n    } else {\n      this.start = options.start || allowedStarts[0];\n    }\n\n    this.isIE = window.navigator.userAgent.indexOf('MSIE') !== -1 || window.navigator.userAgent.indexOf('Trident/') !== -1 || window.navigator.userAgent.indexOf('Edge/') !== -1;\n    this.duration = parsePositiveInt(options.duration, 120);\n    this.delay = parsePositiveInt(options.delay, null);\n    this.dashGap = parsePositiveInt(options.dashGap, 1);\n    this.forceRender = options.hasOwnProperty('forceRender') ? !!options.forceRender : this.isIE;\n    this.reverseStack = !!options.reverseStack;\n    this.selfDestroy = !!options.selfDestroy;\n    this.onReady = options.onReady;\n    this.map = [];\n    this.frameLength = this.currentFrame = this.delayUnit = this.speed = this.handle = null;\n    this.ignoreInvisible = options.hasOwnProperty('ignoreInvisible') ? !!options.ignoreInvisible : false;\n    this.animTimingFunction = options.animTimingFunction || Vivus.LINEAR;\n    this.pathTimingFunction = options.pathTimingFunction || Vivus.LINEAR;\n\n    if (this.delay >= this.duration) {\n      throw new Error('Vivus [constructor]: delay must be shorter than duration');\n    }\n  };\n  /**\n   * Set up callback to the instance\n   * The method will not return enything, but will throw an\n   * error if the parameter is invalid\n   *\n   * @param  {Function} callback Callback for the animation end\n   */\n\n\n  Vivus.prototype.setCallback = function (callback) {\n    // Basic check\n    if (!!callback && callback.constructor !== Function) {\n      throw new Error('Vivus [constructor]: \"callback\" parameter must be a function');\n    }\n\n    this.callback = callback || function () {};\n  };\n  /**\n   * Core\n   **************************************\n   */\n\n  /**\n   * Map the svg, path by path.\n   * The method return nothing, it just fill the\n   * `map` array. Each item in this array represent\n   * a path element from the SVG, with informations for\n   * the animation.\n   *\n   * ```\n   * [\n   *   {\n   *     el: <DOMobj> the path element\n   *     length: <number> length of the path line\n   *     startAt: <number> time start of the path animation (in frames)\n   *     duration: <number> path animation duration (in frames)\n   *   },\n   *   ...\n   * ]\n   * ```\n   *\n   */\n\n\n  Vivus.prototype.mapping = function () {\n    var i, paths, path, pAttrs, pathObj, totalLength, lengthMeter, timePoint;\n    timePoint = totalLength = lengthMeter = 0;\n    paths = this.el.querySelectorAll('path');\n\n    for (i = 0; i < paths.length; i++) {\n      path = paths[i];\n\n      if (this.isInvisible(path)) {\n        continue;\n      }\n\n      pathObj = {\n        el: path,\n        length: Math.ceil(path.getTotalLength())\n      }; // Test if the path length is correct\n\n      if (isNaN(pathObj.length)) {\n        if (window.console && console.warn) {\n          console.warn('Vivus [mapping]: cannot retrieve a path element length', path);\n        }\n\n        continue;\n      }\n\n      this.map.push(pathObj);\n      path.style.strokeDasharray = pathObj.length + ' ' + (pathObj.length + this.dashGap * 2);\n      path.style.strokeDashoffset = pathObj.length + this.dashGap;\n      pathObj.length += this.dashGap;\n      totalLength += pathObj.length;\n      this.renderPath(i);\n    }\n\n    totalLength = totalLength === 0 ? 1 : totalLength;\n    this.delay = this.delay === null ? this.duration / 3 : this.delay;\n    this.delayUnit = this.delay / (paths.length > 1 ? paths.length - 1 : 1); // Reverse stack if asked\n\n    if (this.reverseStack) {\n      this.map.reverse();\n    }\n\n    for (i = 0; i < this.map.length; i++) {\n      pathObj = this.map[i];\n\n      switch (this.type) {\n        case 'delayed':\n          pathObj.startAt = this.delayUnit * i;\n          pathObj.duration = this.duration - this.delay;\n          break;\n\n        case 'oneByOne':\n          pathObj.startAt = lengthMeter / totalLength * this.duration;\n          pathObj.duration = pathObj.length / totalLength * this.duration;\n          break;\n\n        case 'sync':\n        case 'async':\n        case 'nsync':\n          pathObj.startAt = 0;\n          pathObj.duration = this.duration;\n          break;\n\n        case 'scenario-sync':\n          path = pathObj.el;\n          pAttrs = this.parseAttr(path);\n          pathObj.startAt = timePoint + (parsePositiveInt(pAttrs['data-delay'], this.delayUnit) || 0);\n          pathObj.duration = parsePositiveInt(pAttrs['data-duration'], this.duration);\n          timePoint = pAttrs['data-async'] !== undefined ? pathObj.startAt : pathObj.startAt + pathObj.duration;\n          this.frameLength = Math.max(this.frameLength, pathObj.startAt + pathObj.duration);\n          break;\n\n        case 'scenario':\n          path = pathObj.el;\n          pAttrs = this.parseAttr(path);\n          pathObj.startAt = parsePositiveInt(pAttrs['data-start'], this.delayUnit) || 0;\n          pathObj.duration = parsePositiveInt(pAttrs['data-duration'], this.duration);\n          this.frameLength = Math.max(this.frameLength, pathObj.startAt + pathObj.duration);\n          break;\n      }\n\n      lengthMeter += pathObj.length;\n      this.frameLength = this.frameLength || this.duration;\n    }\n  };\n  /**\n   * Interval method to draw the SVG from current\n   * position of the animation. It update the value of\n   * `currentFrame` and re-trace the SVG.\n   *\n   * It use this.handle to store the requestAnimationFrame\n   * and clear it one the animation is stopped. So this\n   * attribute can be used to know if the animation is\n   * playing.\n   *\n   * Once the animation at the end, this method will\n   * trigger the Vivus callback.\n   *\n   */\n\n\n  Vivus.prototype.drawer = function () {\n    var self = this;\n    this.currentFrame += this.speed;\n\n    if (this.currentFrame <= 0) {\n      this.stop();\n      this.reset();\n    } else if (this.currentFrame >= this.frameLength) {\n      this.stop();\n      this.currentFrame = this.frameLength;\n      this.trace();\n\n      if (this.selfDestroy) {\n        this.destroy();\n      }\n    } else {\n      this.trace();\n      this.handle = requestAnimFrame(function () {\n        self.drawer();\n      });\n      return;\n    }\n\n    this.callback(this);\n\n    if (this.instanceCallback) {\n      this.instanceCallback(this);\n      this.instanceCallback = null;\n    }\n  };\n  /**\n   * Draw the SVG at the current instant from the\n   * `currentFrame` value. Here is where most of the magic is.\n   * The trick is to use the `strokeDashoffset` style property.\n   *\n   * For optimisation reasons, a new property called `progress`\n   * is added in each item of `map`. This one contain the current\n   * progress of the path element. Only if the new value is different\n   * the new value will be applied to the DOM element. This\n   * method save a lot of resources to re-render the SVG. And could\n   * be improved if the animation couldn't be played forward.\n   *\n   */\n\n\n  Vivus.prototype.trace = function () {\n    var i, progress, path, currentFrame;\n    currentFrame = this.animTimingFunction(this.currentFrame / this.frameLength) * this.frameLength;\n\n    for (i = 0; i < this.map.length; i++) {\n      path = this.map[i];\n      progress = (currentFrame - path.startAt) / path.duration;\n      progress = this.pathTimingFunction(Math.max(0, Math.min(1, progress)));\n\n      if (path.progress !== progress) {\n        path.progress = progress;\n        path.el.style.strokeDashoffset = Math.floor(path.length * (1 - progress));\n        this.renderPath(i);\n      }\n    }\n  };\n  /**\n   * Method forcing the browser to re-render a path element\n   * from it's index in the map. Depending on the `forceRender`\n   * value.\n   * The trick is to replace the path element by it's clone.\n   * This practice is not recommended because it's asking more\n   * ressources, too much DOM manupulation..\n   * but it's the only way to let the magic happen on IE.\n   * By default, this fallback is only applied on IE.\n   *\n   * @param  {Number} index Path index\n   */\n\n\n  Vivus.prototype.renderPath = function (index) {\n    if (this.forceRender && this.map && this.map[index]) {\n      var pathObj = this.map[index],\n          newPath = pathObj.el.cloneNode(true);\n      pathObj.el.parentNode.replaceChild(newPath, pathObj.el);\n      pathObj.el = newPath;\n    }\n  };\n  /**\n   * When the SVG object is loaded and ready,\n   * this method will continue the initialisation.\n   *\n   * This this mainly due to the case of passing an\n   * object tag in the constructor. It will wait\n   * the end of the loading to initialise.\n   *\n   */\n\n\n  Vivus.prototype.init = function () {\n    // Set object variables\n    this.frameLength = 0;\n    this.currentFrame = 0;\n    this.map = []; // Start\n\n    new Pathformer(this.el);\n    this.mapping();\n    this.starter();\n\n    if (this.onReady) {\n      this.onReady(this);\n    }\n  };\n  /**\n   * Trigger to start of the animation.\n   * Depending on the `start` value, a different script\n   * will be applied.\n   *\n   * If the `start` value is not valid, an error will be thrown.\n   * Even if technically, this is impossible.\n   *\n   */\n\n\n  Vivus.prototype.starter = function () {\n    switch (this.start) {\n      case 'manual':\n        return;\n\n      case 'autostart':\n        this.play();\n        break;\n\n      case 'inViewport':\n        var self = this,\n            listener = function () {\n          if (self.isInViewport(self.parentEl, 1)) {\n            self.play();\n            window.removeEventListener('scroll', listener);\n          }\n        };\n\n        window.addEventListener('scroll', listener);\n        listener();\n        break;\n    }\n  };\n  /**\n   * Controls\n   **************************************\n   */\n\n  /**\n   * Get the current status of the animation between\n   * three different states: 'start', 'progress', 'end'.\n   * @return {string} Instance status\n   */\n\n\n  Vivus.prototype.getStatus = function () {\n    return this.currentFrame === 0 ? 'start' : this.currentFrame === this.frameLength ? 'end' : 'progress';\n  };\n  /**\n   * Reset the instance to the initial state : undraw\n   * Be careful, it just reset the animation, if you're\n   * playing the animation, this won't stop it. But just\n   * make it start from start.\n   *\n   */\n\n\n  Vivus.prototype.reset = function () {\n    return this.setFrameProgress(0);\n  };\n  /**\n   * Set the instance to the final state : drawn\n   * Be careful, it just set the animation, if you're\n   * playing the animation on rewind, this won't stop it.\n   * But just make it start from the end.\n   *\n   */\n\n\n  Vivus.prototype.finish = function () {\n    return this.setFrameProgress(1);\n  };\n  /**\n   * Set the level of progress of the drawing.\n   *\n   * @param {number} progress Level of progress to set\n   */\n\n\n  Vivus.prototype.setFrameProgress = function (progress) {\n    progress = Math.min(1, Math.max(0, progress));\n    this.currentFrame = Math.round(this.frameLength * progress);\n    this.trace();\n    return this;\n  };\n  /**\n   * Play the animation at the desired speed.\n   * Speed must be a valid number (no zero).\n   * By default, the speed value is 1.\n   * But a negative value is accepted to go forward.\n   *\n   * And works with float too.\n   * But don't forget we are in JavaScript, se be nice\n   * with him and give him a 1/2^x value.\n   *\n   * @param  {number} speed Animation speed [optional]\n   */\n\n\n  Vivus.prototype.play = function (speed, callback) {\n    this.instanceCallback = null;\n\n    if (speed && typeof speed === 'function') {\n      this.instanceCallback = speed; // first parameter is actually the callback function\n\n      speed = null;\n    } else if (speed && typeof speed !== 'number') {\n      throw new Error('Vivus [play]: invalid speed');\n    } // if the first parameter wasn't the callback, check if the seconds was\n\n\n    if (callback && typeof callback === 'function' && !this.instanceCallback) {\n      this.instanceCallback = callback;\n    }\n\n    this.speed = speed || 1;\n\n    if (!this.handle) {\n      this.drawer();\n    }\n\n    return this;\n  };\n  /**\n   * Stop the current animation, if on progress.\n   * Should not trigger any error.\n   *\n   */\n\n\n  Vivus.prototype.stop = function () {\n    if (this.handle) {\n      cancelAnimFrame(this.handle);\n      this.handle = null;\n    }\n\n    return this;\n  };\n  /**\n   * Destroy the instance.\n   * Remove all bad styling attributes on all\n   * path tags\n   *\n   */\n\n\n  Vivus.prototype.destroy = function () {\n    this.stop();\n    var i, path;\n\n    for (i = 0; i < this.map.length; i++) {\n      path = this.map[i];\n      path.el.style.strokeDashoffset = null;\n      path.el.style.strokeDasharray = null;\n      this.renderPath(i);\n    }\n  };\n  /**\n   * Utils methods\n   * include methods from Codrops\n   **************************************\n   */\n\n  /**\n   * Method to best guess if a path should added into\n   * the animation or not.\n   *\n   * 1. Use the `data-vivus-ignore` attribute if set\n   * 2. Check if the instance must ignore invisible paths\n   * 3. Check if the path is visible\n   *\n   * For now the visibility checking is unstable.\n   * It will be used for a beta phase.\n   *\n   * Other improvments are planned. Like detecting\n   * is the path got a stroke or a valid opacity.\n   */\n\n\n  Vivus.prototype.isInvisible = function (el) {\n    var rect,\n        ignoreAttr = el.getAttribute('data-ignore');\n\n    if (ignoreAttr !== null) {\n      return ignoreAttr !== 'false';\n    }\n\n    if (this.ignoreInvisible) {\n      rect = el.getBoundingClientRect();\n      return !rect.width && !rect.height;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Parse attributes of a DOM element to\n   * get an object of {attributeName => attributeValue}\n   *\n   * @param  {object} element DOM element to parse\n   * @return {object}         Object of attributes\n   */\n\n\n  Vivus.prototype.parseAttr = function (element) {\n    var attr,\n        output = {};\n\n    if (element && element.attributes) {\n      for (var i = 0; i < element.attributes.length; i++) {\n        attr = element.attributes[i];\n        output[attr.name] = attr.value;\n      }\n    }\n\n    return output;\n  };\n  /**\n   * Reply if an element is in the page viewport\n   *\n   * @param  {object} el Element to observe\n   * @param  {number} h  Percentage of height\n   * @return {boolean}\n   */\n\n\n  Vivus.prototype.isInViewport = function (el, h) {\n    var scrolled = this.scrollY(),\n        viewed = scrolled + this.getViewportH(),\n        elBCR = el.getBoundingClientRect(),\n        elHeight = elBCR.height,\n        elTop = scrolled + elBCR.top,\n        elBottom = elTop + elHeight; // if 0, the element is considered in the viewport as soon as it enters.\n    // if 1, the element is considered in the viewport only when it's fully inside\n    // value in percentage (1 >= h >= 0)\n\n    h = h || 0;\n    return elTop + elHeight * h <= viewed && elBottom >= scrolled;\n  };\n  /**\n   * Get the viewport height in pixels\n   *\n   * @return {integer} Viewport height\n   */\n\n\n  Vivus.prototype.getViewportH = function () {\n    var client = this.docElem.clientHeight,\n        inner = window.innerHeight;\n\n    if (client < inner) {\n      return inner;\n    } else {\n      return client;\n    }\n  };\n  /**\n   * Get the page Y offset\n   *\n   * @return {integer} Page Y offset\n   */\n\n\n  Vivus.prototype.scrollY = function () {\n    return window.pageYOffset || this.docElem.scrollTop;\n  };\n\n  setupEnv = function () {\n    if (Vivus.prototype.docElem) {\n      return;\n    }\n    /**\n     * Alias for document element\n     *\n     * @type {DOMelement}\n     */\n\n\n    Vivus.prototype.docElem = window.document.documentElement;\n    /**\n     * Alias for `requestAnimationFrame` or\n     * `setTimeout` function for deprecated browsers.\n     *\n     */\n\n    requestAnimFrame = function () {\n      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (\n      /* function */\n      callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n    }();\n    /**\n     * Alias for `cancelAnimationFrame` or\n     * `cancelTimeout` function for deprecated browsers.\n     *\n     */\n\n\n    cancelAnimFrame = function () {\n      return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (id) {\n        return window.clearTimeout(id);\n      };\n    }();\n  };\n  /**\n   * Parse string to integer.\n   * If the number is not positive or null\n   * the method will return the default value\n   * or 0 if undefined\n   *\n   * @param {string} value String to parse\n   * @param {*} defaultValue Value to return if the result parsed is invalid\n   * @return {number}\n   *\n   */\n\n\n  parsePositiveInt = function (value, defaultValue) {\n    var output = parseInt(value, 10);\n    return output >= 0 ? output : defaultValue;\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return Vivus;\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = Vivus;\n  } else {\n    // Browser globals\n    window.Vivus = Vivus;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}